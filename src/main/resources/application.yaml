server:
  # port: 8080
  # location on classpath (e.g. src/main/resources/WEB in maven)
  static:
    classpath:
      location: "/WEB"
      # this is optional, defaults to "/"
      #context: "/"
      welcome: "index.html"

#grpc:
#  port: 50051
#  channels:                
#    myserver:           
#      host: localhost      
#      port: 50051

##### security settings - simple basic auth #####
# can work with oracle.demo.SecurityResource
security:
  enabled: true
  providers:
  - abac:
  - http-basic-auth:
      realm: "helidon"
      users:
      - login: "john"
        password: "password1"
        roles: ["user", "admin"]
      - login: "mary"
        password: "password2"
        roles: ["user"]
      - login: "ken"
        password: "password3"

##### JPA Settings #####
javax:
  sql:
    DataSource:
      #DemoDataSource: ## default h2
      H2DataSource: ## default h2
        dataSourceClassName: org.h2.jdbcx.JdbcDataSource
        dataSource:
          url: jdbc:h2:mem:demo;INIT=RUNSCRIPT FROM 'classpath:createtable.ddl' 
          user: sa
          password: ""
      OracleDataSource: # example config for Oracle database
        dataSourceClassName: oracle.jdbc.pool.OracleDataSource
        dataSource:
          #url: jdbc:oracle:thin:@abc_high?TNS_ADMIN=/tnsdir
          url: jdbc:oracle:thin:@//${ORACLE_HOST}:1521/PDB1
          user: demo
          password: OCHaCafe6666
      MySQLDataSource: # example config for MySQL database
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://localhost:3306/demo
        username: oracle
        password: mysql

ORACLE_HOST: localhost # localhost may not work in some cases
DEMO_DATASOURCE: H2DataSource #OracleDataSource # default: H2DataSource

# MicroProfile LRA settings
mp.lra:
  coordinator.url: http://localhost:8070/lra-coordinator
  #participant.url: http://localhost:8080
  propagation.active: true
  coordinator.headers-propagation.prefix: ["x-b3-", "oracle-tmm-", "authorization", "refresh-"]

# Reactive Messaging - Kafka connector
mp.messaging:
  incoming.connector-in:
    connector: helidon-mock
    #connector: helidon-kafka
    topic: stream01
    auto.offset.reset: latest
    enable.auto.commit: true
    group.id: GROUP_01
  outgoing.connector-out:
    connector: helidon-mock
    #connector: helidon-kafka
    topic: stream01
    #backpressure.size: 9223372036854775807

  connector:
    helidon-kafka:
      bootstrap.servers: "streaming.us-phoenix-1.oci.oraclecloud.com:9092" # change endpoint as appropriate
      sasl.mechanism: PLAIN
      security.protocol: SASL_SSL
      sasl.jaas.config: ${SASL_JAAS_CONFIG}
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: org.apache.kafka.common.serialization.StringSerializer
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: org.apache.kafka.common.serialization.StringDeserializer

SASL_JAAS_CONFIG: "This can be overwritten by an environment variable"
