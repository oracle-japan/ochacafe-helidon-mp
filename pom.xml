<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.helidon.applications</groupId>
        <artifactId>helidon-mp</artifactId>
        <version>2.3.0</version>
        <relativePath />
    </parent>

    <groupId>oracle.demo</groupId>
    <artifactId>helidon-demo-mp</artifactId>
    <version>2.3.0.0</version>
    <!-- packaging>jar</packaging -->
    <name>${project.artifactId}</name>

    <properties>
        <mainClass>oracle.demo.Main</mainClass>
        <docker.repo.prefix></docker.repo.prefix>
        <!-- prefix for remote repository ending with /-->
        <docker.repo.remote.prefix>${env.REMOTE_REPO_PREFIX}</docker.repo.remote.prefix>
        <docker.file>Dockerfile</docker.file>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <grpc.version>1.35.0</grpc.version>
    </properties>

    <profiles>
        <!-- generate protobuf classes => mvn -P protoc generate-sources -->
        <profile>
            <id>protoc</id>
            <dependencies>
                <dependency>
                    <groupId>io.grpc</groupId>
                    <artifactId>grpc-protobuf</artifactId>
                    <version>${grpc.version}</version>
                </dependency>
                <dependency>
                    <groupId>io.grpc</groupId>
                    <artifactId>grpc-stub</artifactId>
                    <version>${grpc.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <!--  compile .proto -->
                    <plugin>
                        <groupId>org.xolstice.maven.plugins</groupId>
                        <artifactId>protobuf-maven-plugin</artifactId>
                        <version>0.6.1</version>
                        <configuration>
                            <protocArtifact>com.google.protobuf:protoc:3.15.2:exe:${os.detected.classifier}</protocArtifact>
                            <pluginId>grpc-java</pluginId>
                            <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>compile</goal>
                                    <goal>compile-custom</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- copy generated sources -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <id>copy-template</id>
                                <phase>generate-sources</phase>
                                <configuration>
                                    <target>
                                        <echo message="copy protobuf generated files to src" />
                                        <copy todir="src/main/java" overwrite="no">
                                            <fileset dir="target/generated-sources/protobuf/java" />
                                            <fileset dir="target/generated-sources/protobuf/grpc-java" />
                                        </copy>
                                    </target>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- tracing option dependencies-->
        <profile>
            <!-- jaeger -->
            <id>tracing-jaeger</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>io.helidon.tracing</groupId>
                    <artifactId>helidon-tracing-jaeger</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!-- zipkin -->
            <id>tracing-zipkin</id>
            <dependencies>
                <dependency>
                    <groupId>io.helidon.tracing</groupId>
                    <artifactId>helidon-tracing-zipkin</artifactId>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!-- OCI Application Performance Monitoring -->
            <id>tracing-oci-apm</id>
            <dependencies>
                <dependency>
                    <groupId>com.oracle.apm.agent.java</groupId>
                    <artifactId>apm-java-agent-tracer</artifactId>
                    <!-- version>RELEASE</version -->
                    <!-- /com/oracle/apm/agent/java/apm-java-agent-tracer/maven-metadata.xml -->
                    <version>1.0.1389</version>
                </dependency>
                <dependency>
                    <groupId>com.oracle.apm.agent.java</groupId>
                    <artifactId>apm-java-agent-helidon</artifactId>
                    <!-- version>RELEASE</version -->
                    <!-- /com/oracle/apm/agent/java/apm-java-agent-helidon/maven-metadata.xml -->
                    <version>1.0.1389</version>
                </dependency>
            </dependencies>
            <repositories>
                <repository>
                    <id>oci</id>
                    <name>OCI Object Store</name>
                    <url>https://objectstorage.us-ashburn-1.oraclecloud.com/n/idhph4hmky92/b/prod-agent-binaries/o</url>
                  </repository>
            </repositories>
        </profile>

        <!-- JDBC option dependencies -->
        <profile>
            <id>db-oracle</id>
            <properties>
                <oracle.jdbc.version>19.6.0.0</oracle.jdbc.version>
            </properties>
            <dependencies>
                <!-- Oracle JDBC driver from Maven Central Repository -->
                <dependency>
                    <groupId>com.oracle.database.jdbc</groupId>
                    <artifactId>ojdbc8</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>

                <!-- Oracle JDBC additional library required to support Internationalization -->
                <dependency>
                    <groupId>com.oracle.database.nls</groupId>
                    <artifactId>orai18n</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>

                <!-- Oracle JDBC additional libraries required to support XMLType -->
                <dependency>
                    <groupId>com.oracle.database.xml</groupId>
                    <artifactId>xdb6</artifactId>
                    <version>18.3.0.0</version>
                </dependency>
                <dependency>
                    <groupId>com.oracle.database.xml</groupId>
                    <artifactId>xmlparserv2</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>

                <!-- Oracle JDBC additional libraries required to support Oracle Wallets from Java -->
                <dependency>
                    <groupId>com.oracle.database.security</groupId>
                    <artifactId>oraclepki</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.oracle.database.security</groupId>
                    <artifactId>osdt_cert</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.oracle.database.security</groupId>
                    <artifactId>osdt_core</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>

                <!-- Oracle JDBC additional libraries required to support FAN events in the driver -->
                <dependency>
                    <groupId>com.oracle.database.ha</groupId>
                    <artifactId>simplefan</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>
                <dependency>
                    <groupId>com.oracle.database.ha</groupId>
                    <artifactId>ons</artifactId>
                    <version>${oracle.jdbc.version}</version>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!-- MySQL database driver -->
            <id>db-mysql</id>
            <dependencies>
                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>8.0.20</version>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!-- h2 jdbc driver -->
            <id>db-h2</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>com.h2database</groupId>
                    <artifactId>h2</artifactId>
                    <version>1.4.200</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>

        <!-- WebLogic client lib -->
        <profile>
            <id>weblogic</id>
            <dependencies>
                <!-- WebLogic thin t3 client for 14.1.1 -->
                <dependency>
                    <groupId>oracle.weblogic</groupId>
                    <artifactId>wlthint3client</artifactId>
                    <version>14.1.1.0.0</version>
                </dependency>
            </dependencies>
        </profile>

    </profiles>

    <dependencies>
        <dependency>
            <groupId>io.helidon.microprofile.bundles</groupId>
            <artifactId>helidon-microprofile</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-binding</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jandex</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>jakarta.activation</groupId>
            <artifactId>jakarta.activation-api</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.helidon.microprofile.tests</groupId>
            <artifactId>helidon-microprofile-tests-junit5</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- support Reactive Messaging / Kafka Connector -->
        <dependency>
            <groupId>io.helidon.microprofile.messaging</groupId>
            <artifactId>helidon-microprofile-messaging</artifactId>
        </dependency>
        <!-- JMS Connector -->
        <dependency>
            <groupId>io.helidon.messaging.jms</groupId>
            <artifactId>helidon-messaging-jms</artifactId>
        </dependency>

        <!-- support gRPC-->
        <dependency>
            <groupId>io.helidon.microprofile.grpc</groupId>
            <artifactId>helidon-microprofile-grpc-server</artifactId>
        </dependency>
        <dependency>
            <groupId>io.helidon.microprofile.grpc</groupId>
            <artifactId>helidon-microprofile-grpc-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-protobuf</artifactId>
            <version>${grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <version>${grpc.version}</version>
        </dependency>

        <!-- support tracing, see profiles for tracing options -->
        <dependency>
            <groupId>io.helidon.microprofile.tracing</groupId>
            <artifactId>helidon-microprofile-tracing</artifactId>
        </dependency>

        <!-- Tracing Exempler -->
        <dependency>
            <groupId>io.helidon.metrics</groupId>
            <artifactId>helidon-metrics-trace-exemplar</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- support idcs login -->
        <!--
        <dependency>
            <groupId>io.helidon.microprofile</groupId>
            <artifactId>helidon-microprofile-oidc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.helidon.security.providers</groupId>
            <artifactId>helidon-security-providers-idcs-mapper</artifactId>
        </dependency>
        -->

        <!-- support jpa,jta -->
        <dependency>
            <groupId>io.helidon.integrations.cdi</groupId>
            <artifactId>helidon-integrations-cdi-datasource-hikaricp</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.helidon.integrations.cdi</groupId>
            <artifactId>helidon-integrations-cdi-jta-weld</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.helidon.integrations.cdi</groupId>
            <artifactId>helidon-integrations-cdi-jpa</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.helidon.integrations.cdi</groupId>
            <artifactId>helidon-integrations-cdi-eclipselink</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>2.2.2</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.transaction</groupId>
            <artifactId>javax.transaction-api</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>

        <!-- support Mapped Diagnostic Context -->
        <dependency>
            <groupId>io.helidon.logging</groupId>
            <artifactId>helidon-logging-jul</artifactId>
        </dependency>

        <!-- support GraphQL -->
        <dependency>
            <groupId>io.helidon.microprofile.graphql</groupId>
            <artifactId>helidon-microprofile-graphql-server</artifactId>
        </dependency>

        <!-- support scheduling -->
        <dependency>
            <groupId>io.helidon.microprofile.scheduling</groupId>
            <artifactId>helidon-microprofile-scheduling</artifactId>
        </dependency>

        <!-- for client tools-->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.4</version>
        </dependency>

        <!-- cowweb -->
        <dependency>
            <groupId>com.github.ricksbrown</groupId>
            <artifactId>cowsay</artifactId>
            <version>1.1.0</version>
        </dependency>

    </dependencies>

    <build>
        <!-- for gRPC -->
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.6.2</version>
            </extension>
        </extensions>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-libs</id>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jboss.jandex</groupId>
                <artifactId>jandex-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-index</id>
                    </execution>
                </executions>
            </plugin>

            <!-- JPA weaving -->
            <plugin>
                <groupId>com.ethlo.persistence.tools</groupId>
                <artifactId>eclipselink-maven-plugin</artifactId>
                <version>2.7.1.1</version>
                <dependencies>
                    <dependency>
                        <groupId>javax.annotation</groupId>
                        <artifactId>javax.annotation-api</artifactId>
                        <version>1.3.1</version>
                    </dependency>
                    <dependency>
                        <groupId>javax.xml.bind</groupId>
                        <artifactId>jaxb-api</artifactId>
                        <version>2.3.0</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>weave</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>weave</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>modelgen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>modelgen</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <basePackages>
                        <basePackage>oracle.demo.jpa</basePackage>
                    </basePackages>
                    <addClassesToPersistenceFile>false</addClassesToPersistenceFile>
                </configuration>
            </plugin>

            <!-- making docker image -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <!-- docker build -->
                    <execution>
                        <id>docker-local-build</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>build</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.prefix}${project.artifactId}:${project.version}</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.prefix}${project.artifactId}:latest</argument>
                                <argument>-f</argument>
                                <argument>${docker.file}</argument>
                                <argument>.</argument>
                            </arguments>
                            <workingDirectory>${project.basedir}</workingDirectory>
                        </configuration>
                    </execution>
                    <!-- docker build -->
                    <execution>
                        <id>docker-build</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>build</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.prefix}${project.artifactId}:${project.version}</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.prefix}${project.artifactId}:latest</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.remote.prefix}${project.artifactId}:${project.version}</argument>
                                <argument>-t</argument>
                                <argument>${docker.repo.remote.prefix}${project.artifactId}:latest</argument>
                                <argument>-f</argument>
                                <argument>${docker.file}</argument>
                                <argument>.</argument>
                            </arguments>
                            <workingDirectory>${project.basedir}</workingDirectory>
                        </configuration>
                    </execution>
                    <!-- docker push to remote repo -->
                    <execution>
                        <id>docker-push-latest</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>push</argument>
                                <argument>${docker.repo.remote.prefix}${project.artifactId}:latest</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>docker-push-version</id>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>push</argument>
                                <argument>${docker.repo.remote.prefix}${project.artifactId}:${project.version}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

    <repositories>
        <repository>
            <id>project-local</id >
            <url>file:m2repo </url>
        </repository>
    </repositories>

</project>